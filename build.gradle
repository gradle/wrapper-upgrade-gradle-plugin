import org.gradle.util.GradleVersion

plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'com.github.breadmoirai.github-release' version '2.3.7'
    id 'org.gradle.wrapper-upgrade' version '0.10.1'
}

group = 'org.gradle'
version = layout.projectDirectory.file('release/version.txt').asFile.text.trim()


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.kohsuke:github-api:1.306'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.13.3'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.2'

    testImplementation gradleTestKit()
    testImplementation 'org.spockframework:spock-core:2.1-groovy-3.0'
}

wrapperUpgrade {
    gradle {
        'wrapper-upgrade-gradle-plugin' {
            repo = 'gradle/wrapper-upgrade-gradle-plugin'
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    def testGradleVersion = findProperty('testGradleVersion') ?: GradleVersion.current().version
    systemProperty 'testContext.gradleVersion', testGradleVersion
    buildScan.value(identityPath.path + "#gradleVersion", testGradleVersion)
}

gradlePlugin {
    automatedPublishing = false

    plugins {
        wrapperUpgrade {
            id = 'org.gradle.wrapper-upgrade'
            displayName = 'Wrapper Upgrade Gradle Plugin'
            description = 'A Gradle plugin that detects and updates Gradle and Maven wrappers to the latest Gradle and Maven version.'
            implementationClass = 'org.gradle.wrapperupgrade.WrapperUpgradePlugin'
        }
    }
}

tasks.withType(ValidatePlugins).configureEach {
    failOnWarning = true
    enableStricterValidation = true
}

pluginBundle {
    website = "https://github.com/gradle/wrapper-upgrade-gradle-plugin/"
    vcsUrl = "https://github.com/gradle/wrapper-upgrade-gradle-plugin.git"
    tags = ["gradle", "maven", "wrapper"]

    mavenCoordinates {
        groupId = 'org.gradle'
        artifactId = 'wrapper-upgrade-gradle-plugin'
    }
}

signing {
    // Require publications to be signed on CI. Otherwise, publication will be signed only if keys are provided.
    required providers.environmentVariable('CI').isPresent()

    useInMemoryPgpKeys(
        providers.environmentVariable('PGP_SIGNING_KEY').orNull,
        providers.environmentVariable('PGP_SIGNING_KEY_PASSPHRASE').orNull
    )

    sign(configurations.archives)
}

githubRelease {
   token = System.getenv('WRAPPER_UPGRADE_GRADLE_PLUGIN_GIT_TOKEN') ?: ''
   owner = 'gradle'
   repo = 'wrapper-upgrade-gradle-plugin'
   targetCommitish = 'main'
   releaseName = gitHubReleaseName()
   tagName = gitReleaseTag()
   prerelease = false
   overwrite = false
   body = layout.projectDirectory.file('release/changes.md').asFile.text.trim()
}

tasks.register('createReleaseTag', CreateGitTag) {
    tagName = gitReleaseTag()
}

tasks.named('githubRelease').configure {
    dependsOn('createReleaseTag')
}

tasks.named('publishPlugins').configure {
    notCompatibleWithConfigurationCache("$name task does not support configuration caching")
}

tasks.withType(Sign).configureEach {
    notCompatibleWithConfigurationCache("$name task does not support configuration caching")
}

def gitHubReleaseName() {
    return version.toString()
}

def gitReleaseTag() {
    return "v${version}"
}
